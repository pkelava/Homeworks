class TetronimoJ {

    field int X1,X2,X3,X4,Y1,Y2,Y3,Y4, Position, GameSpeed, FarRight, FarLeft, FarDown, FarUp, SquareOne, SquareTwo, SquareThree, SquareFour;
    field MyMath MathMetods;

    constructor TetronimoJ new (Array gameField, int gameSpeed) {
        let X1 = 146;
        let Y1 = 0;
        let X2 = 146;
        let Y2 = 10;
        let X3 = 146;
        let Y3 = 20;
        let X4 = 136;
        let Y4 = 20;
        let GameSpeed = gameSpeed;
        let SquareOne = 1;
        let SquareTwo = 25;
        let SquareThree = 49;
        let SquareFour = 48;
        let FarLeft = 0;
        let FarRight = 1;
        let FarDown = 2;
        let FarUp = 0;

        let gameField[1] = 1;
        let gameField[25] = 1;
        let gameField[49] = 1;
        let gameField[48] = 1;

        let Position = 3;
        do DrawTetronimo(true);
        return this;
    }

    method void DrawTetronimo(bool color){
        do Screen.setColor(color);
        do Screen.drawRectangle(X1,Y1,X1 + 8,Y1 + 8);
        do Screen.drawRectangle(X2,Y2,X2 + 8,Y2 + 8);
        do Screen.drawRectangle(X3,Y3,X3 + 8,Y3 + 8);
        do Screen.drawRectangle(X4,Y4,X4 + 8,Y4 + 8);
        return;
    }

    method void MoveRight(Array gameField){
        do DrawTetronimo(false);
    

        let FarLeft = FarLeft + 1;
        let FarRight = FarRight + 1;
        let X1 = X1 + 10;
        let X2 = X2 + 10;
        let X3 = X3 + 10;
        let X4 = X4 + 10;

        do DrawTetronimo(true);

        do Sys.wait(GameSpeed);
        return;
    }

    method void DropDown(Array gameField){
        do DrawTetronimo(false);
    
        let FarUp = FarUp + 1;
        let FarDown = FarDown + 1;
        let Y1 = Y1 + 10;
        let Y2 = Y2 + 10;
        let Y3 = Y3 + 10;
        let Y4 = Y4 + 10;
    
        do DrawTetronimo(true);
        return;
    }

    method void MoveLeft(Array gameField){
        do DrawTetronimo(false);
    
        let FarLeft = FarLeft - 1;
        let FarRight = FarRight - 1;
        let X1 = X1 - 10;
        let X2 = X2 - 10;
        let X3 = X3 - 10;
        let X4 = X4 - 10;
        do DrawTetronimo(true);

        do Sys.wait(GameSpeed);
        return;
    }

    method void Rotate(Array gameField){
        if(Position = 1){
            do DrawTetronimo(false);
            
            let FarRight = FarRight + 1;
            let FarDown = FarDown - 1;
            
            let X3 = X2 + 10;
            let Y3 = Y3 - 10;
            let X4 = X3;
            let Y4 = Y4 - 10;
            do DrawTetronimo(true);
            let Position = 2;
            do Sys.wait(GameSpeed);
            return;
        }
        if(Position = 2){
            do DrawTetronimo(false);

            let FarRight = FarRight - 1;
            let FarDown = FarDown + 1;

            let X1 = X1 + 10;
            let Y2 = Y2 + 10;
            let X3 = X3 - 10;
            let Y3 = Y2 + 10;
            let X4 = X1 - 10;
            let Y4 = Y3;
            do DrawTetronimo(true);
            let Position = 3;
            do Sys.wait(GameSpeed);
            return;
        }
        if(Position = 3){
            do DrawTetronimo(false);

            let FarRight = FarRight + 1;
            let FarDown = FarDown - 1;

            let X1 = X1 - 10;
            let X2 = X1;
            let Y2 = Y1 + 10;
            let X3 = X2 + 10;
            let Y3 = Y2;
            let X4 = X3 + 10;
            let Y4 = Y3;
            do DrawTetronimo(true);
            let Position = 4;
            do Sys.wait(GameSpeed);
            return; 
        }
        if(Position = 4){
            do DrawTetronimo(false);

            let FarRight = FarRight - 1;
            let FarDown = FarDown + 1;

            let X2 = X1 + 10;
            let Y2 = Y1;
            let X3 = X1;
            let Y3 = Y2 + 10;
            let X4 = X3;
            let Y4 = Y3 + 10;
            do DrawTetronimo(true);
            let Position = 1;
            do Sys.wait(GameSpeed);
            return; 
        }
        do Sys.wait(GameSpeed);
        return;
    }

    method bool CanMove(Array gameField, int move){
        if(move = 1){
            //Lijevo
            if(FarLeft > 0){
                if(Position = 1){
                    if((gameField[SquareOne - 1] = 0) & (gameField[SquareThree - 1] = 0) & (gameField[SquareFour - 1] = 0)){
                        let gameField[SquareOne] = 0;
                        let gameField[SquareTwo] = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour] = 0;
                        let SquareOne = SquareOne - 1;
                        let SquareTwo = SquareTwo - 1;
                        let SquareThree = SquareThree - 1;
                        let SquareFour = SquareFour - 1;
                        let gameField[SquareOne] = 1;
                        let gameField[SquareTwo] = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour] = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                if(Position = 2){
                    if((gameField[SquareOne - 1] = 0) & (gameField[SquareFour - 1] = 0)){

                        let gameField[SquareOne]   = 0;
                        let gameField[SquareTwo]   = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour]  = 0;

                        let SquareOne   = SquareOne - 1;
                        let SquareTwo   = SquareTwo - 1;
                        let SquareThree = SquareThree - 1;
                        let SquareFour  = SquareFour - 1;

                        let gameField[SquareOne]   = 1;
                        let gameField[SquareTwo]   = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour]  = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                if(Position = 3){
                    if((gameField[SquareOne - 1] = 0) & (gameField[SquareTwo - 1] = 0) & (gameField[SquareFour - 1] = 0)){

                        let gameField[SquareOne]   = 0;
                        let gameField[SquareTwo]   = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour]  = 0;

                        let SquareOne   = SquareOne - 1;
                        let SquareTwo   = SquareTwo - 1;
                        let SquareThree = SquareThree - 1;
                        let SquareFour  = SquareFour - 1;

                        let gameField[SquareOne]   = 1;
                        let gameField[SquareTwo]   = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour]  = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                if(Position = 4){
                    if((gameField[SquareOne - 1] = 0) & (gameField[SquareTwo - 1] = 0)){

                        let gameField[SquareOne]   = 0;
                        let gameField[SquareTwo]   = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour]  = 0;

                        let SquareOne   = SquareOne - 1;
                        let SquareTwo   = SquareTwo - 1;
                        let SquareThree = SquareThree - 1;
                        let SquareFour  = SquareFour - 1;

                        let gameField[SquareOne]   = 1;
                        let gameField[SquareTwo]   = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour]  = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
            }
            return false;
        }
        if(move = 2){
            //Desno
            if(FarRight < 23){
                if(Position = 1){
                    if((gameField[SquareTwo + 1] = 0) & (gameField[SquareFour + 1] = 0) & (gameField[SquareThree + 1] = 0)){
                        let gameField[SquareOne] = 0;
                        let gameField[SquareTwo] = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour] = 0;
                        let SquareOne = SquareOne + 1;
                        let SquareTwo = SquareTwo + 1;
                        let SquareThree = SquareThree + 1;
                        let SquareFour = SquareFour + 1;
                        let gameField[SquareOne] = 1;
                        let gameField[SquareTwo] = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour] = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                if(Position = 2){
                    if((gameField[SquareThree + 1] = 0) & (gameField[SquareFour + 1] = 0)){

                        let gameField[SquareOne]   = 0;
                        let gameField[SquareTwo]   = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour]  = 0;

                        let SquareOne   = SquareOne + 1;
                        let SquareTwo   = SquareTwo + 1;
                        let SquareThree = SquareThree + 1;
                        let SquareFour  = SquareFour + 1;

                        let gameField[SquareOne]   = 1;
                        let gameField[SquareTwo]   = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour]  = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                if(Position = 3){
                    if((gameField[SquareOne + 1] = 0) & (gameField[SquareTwo + 1] = 0) & (gameField[SquareThree + 1] = 0)){

                        let gameField[SquareOne]   = 0;
                        let gameField[SquareTwo]   = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour]  = 0;

                        let SquareOne   = SquareOne + 1;
                        let SquareTwo   = SquareTwo + 1;
                        let SquareThree = SquareThree + 1;
                        let SquareFour  = SquareFour + 1;

                        let gameField[SquareOne]   = 1;
                        let gameField[SquareTwo]   = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour]  = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                if(Position = 4){
                    if((gameField[SquareOne + 1] = 0) & (gameField[SquareFour + 1] = 0)){

                        let gameField[SquareOne]   = 0;
                        let gameField[SquareTwo]   = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour]  = 0;

                        let SquareOne   = SquareOne + 1;
                        let SquareTwo   = SquareTwo + 1;
                        let SquareThree = SquareThree + 1;
                        let SquareFour  = SquareFour + 1;

                        let gameField[SquareOne]   = 1;
                        let gameField[SquareTwo]   = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour]  = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
            }
            return false;
        }
        if(move = 3){
            //Dolje
            if(FarDown < 23){
                if(Position = 1){
                    if((gameField[SquareFour + 24] = 0) & (gameField[SquareTwo + 24] = 0) & ((SquareFour + 24) < 576)){             

                        let gameField[SquareOne] = 0;
                        let gameField[SquareTwo] = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour] = 0;

                        let SquareOne   = SquareOne   + 24;
                        let SquareTwo   = SquareTwo   + 24;
                        let SquareThree = SquareThree + 24;
                        let SquareFour  = SquareFour  + 24;

                        let gameField[SquareOne]   = 1;
                        let gameField[SquareTwo]   = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour]  = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                if(Position = 2){
                    if((gameField[SquareOne + 24] = 0) & ((SquareFour + 24) < 576) & 
                       (gameField[SquareTwo + 24] = 0) & (gameField[SquareFour + 24] = 0)){
                        let gameField[SquareOne] = 0;
                        let gameField[SquareTwo] = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour] = 0;
                        let SquareOne = SquareOne + 24;
                        let SquareTwo = SquareTwo + 24;
                        let SquareThree = SquareThree + 24;
                        let SquareFour = SquareFour + 24;
                        let gameField[SquareOne] = 1;
                        let gameField[SquareTwo] = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour] = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                if(Position = 3){
                    if((gameField[SquareThree + 24] = 0) & ((SquareFour + 24) < 576) & (gameField[SquareFour + 24] = 0)){
                        let gameField[SquareOne] = 0;
                        let gameField[SquareTwo] = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour] = 0;
                        let SquareOne = SquareOne + 24;
                        let SquareTwo = SquareTwo + 24;
                        let SquareThree = SquareThree + 24;
                        let SquareFour = SquareFour + 24;
                        let gameField[SquareOne] = 1;
                        let gameField[SquareTwo] = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour] = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                if(Position = 4){
                    if((gameField[SquareFour + 24] = 0) & ((SquareFour + 24) < 576) & 
                       (gameField[SquareThree + 24] = 0) & (gameField[SquareTwo + 24] = 0)){
                        let gameField[SquareOne] = 0;
                        let gameField[SquareTwo] = 0;
                        let gameField[SquareThree] = 0;
                        let gameField[SquareFour] = 0;
                        let SquareOne = SquareOne + 24;
                        let SquareTwo = SquareTwo + 24;
                        let SquareThree = SquareThree + 24;
                        let SquareFour = SquareFour + 24;
                        let gameField[SquareOne] = 1;
                        let gameField[SquareTwo] = 1;
                        let gameField[SquareThree] = 1;
                        let gameField[SquareFour] = 1;
                        return true;
                    }
                    else{
                        return false;
                    }
                }
            }
            return false;
        }
        if(move = 4){
            //Rotacija
            if(Position = 1){
                if((gameField[SquareTwo + 25] = 0) & (gameField[SquareTwo + 1] = 0)){
                    let gameField[SquareThree] = 0;
                    let gameField[SquareFour] = 0;
                    let SquareThree = SquareTwo + 1;
                    let SquareFour = SquareThree + 24;
                    let gameField[SquareThree] = 1;
                    let gameField[SquareFour] = 1;
                    return true;
                }
                else{
                    return false;
                }
            }
            if(Position = 2){
                if((FarDown < 23) & (gameField[SquareTwo + 24] = 0) & 
                   (gameField[SquareTwo + 48] = 0) & (gameField[SquareTwo + 47] = 0)){
                       let gameField[SquareOne] = 0;
                       let gameField[SquareThree] = 0;
                       let gameField[SquareFour] = 0;
                       let SquareOne = SquareTwo;
                       let SquareTwo = SquareOne + 24;
                       let SquareThree = SquareTwo + 24;
                       let SquareFour = SquareThree - 1;
                       let gameField[SquareTwo] = 1;
                       let gameField[SquareThree] = 1;
                       let gameField[SquareFour] = 1;
                       return true;
                   }
                   else{
                       return false;
                   }
            }
            if(Position = 3){
                if((gameField[SquareOne-1] = 0) & (gameField[SquareTwo - 1] = 0) & (gameField[SquareTwo + 1] = 0)){
                       let gameField[SquareOne] = 0;
                       let gameField[SquareThree] = 0;
                       let gameField[SquareFour] = 0;
                       let SquareOne = SquareOne - 1;
                       let SquareTwo = SquareOne + 24;
                       let SquareThree = SquareTwo + 1;
                       let SquareFour = SquareThree + 1;
                       let gameField[SquareOne] = 1;
                       let gameField[SquareTwo] = 1;
                       let gameField[SquareFour] = 1;
                       return true;
                   }
                   else{
                       return false;
                   }
            }
            if(Position = 4){
                if((FarDown < 23) & (gameField[SquareOne + 1] = 0) & (gameField[SquareTwo + 24] = 0)){
                       let gameField[SquareThree] = 0;
                       let gameField[SquareFour] = 0;
                       let SquareTwo = SquareOne + 1;
                       let SquareThree = SquareOne + 24;
                       let SquareFour = SquareThree + 24;
                       let gameField[SquareTwo] = 1;
                       let gameField[SquareFour] = 1;
                       return true;
                   }
                   else{
                       return false;
                   }
            }
        }
        return false;
    }

       method int CheckForRemoval(Array gameField,int Score){
        var int i, j, row, numOfRows;
        var bool flag;
        var Array toDelete;
        let toDelete = Array.new(4);
        let numOfRows = 0;
        let toDelete[0] = -1;
        let toDelete[1] = -1;
        let toDelete[2] = -1;
        let toDelete[3] = -1;

        let flag = true;
        let i = FarUp;
        while(i < (FarDown + 1)){
            
            let row = 24*i;
            let j = 0;
            let flag = true;
            while(j < 24){
                if(gameField[row+j] = 0){
                    let flag = false;
                }
                let j = j + 1;
            }
            if(flag = true){
                    let numOfRows = numOfRows + 1;
                    let toDelete[i-FarUp] = i;
            }
            let i = i + 1;
        }

        if(flag){
            return RemoveRows(gameField ,toDelete, numOfRows, Score);
        }      
        return 0;
    }

    method int RemoveRows(Array gameField ,Array rowsToRemove, int numOfRows, int Score){
        var int connectedRows, newScore;
        let connectedRows = 0;
        let newScore = 100;
        if(~(rowsToRemove[0] = -1) & ~(rowsToRemove[1] = -1)){
            let connectedRows = connectedRows + 1;
            let newScore = Score + 200;
        }
        if(~(rowsToRemove[1] = -1) & ~(rowsToRemove[2] = -1)){
            let connectedRows = connectedRows + 1;
            let newScore = Score + 400;
        }
        if(~(rowsToRemove[2] = -1) & ~(rowsToRemove[3] = -1)){
            let connectedRows = connectedRows + 1;
            let newScore = Score + 700;
        }

        if(~(rowsToRemove[0] = -1)){
            do RedrawGameField(gameField, rowsToRemove[0]);
        }
        if(~(rowsToRemove[1] = -1)){
            do RedrawGameField(gameField, rowsToRemove[1]);
        }
        if(~(rowsToRemove[2] = -1)){
            do RedrawGameField(gameField, rowsToRemove[2]);
        }
        if(~(rowsToRemove[3] = -1)){
            do RedrawGameField(gameField, rowsToRemove[3]);
        }
        do Output.printInt(newScore);
        return newScore;
    }
    
    method void RedrawGameField(Array gameField, int row){
        var int currentRow, upperRow, i, j;
        let i = 0;
        let currentRow = row;
        let upperRow = (currentRow - 1);
        while(upperRow > -1){
            do Screen.setColor(false);
            do Screen.drawRectangle(135,(currentRow*10),375,(currentRow*10)+8);
            do Screen.setColor(true);
            let i = 0;
            while(i < 24){
                let gameField[(currentRow*24) + i] = gameField[(upperRow*24) + i];
                let gameField[(upperRow*24)+i] = 0;
                let i = i + 1;
            }
            let currentRow = (currentRow - 1);
            let upperRow = (upperRow - 1);
        }

        let i = 0;
        while(i < 24){
            let j = 0;
            while(j < 24){
                if(gameField[24*i + j] = 1){
                    do Screen.drawRectangle(136 + (10*j),10*i,144 + (10*j),(10*i) + 8);
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }
    
    method void Dispose(){
        do Memory.deAlloc(this);
        return;
    }
}